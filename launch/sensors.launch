<launch>

  <arg name="enable_depth_camera"  default="true"/> 
  <arg name="enable_lidar"  default="true"/> 
  <arg name="enable_imu"  default="true"/> 
  <arg name="use_royale"  default="true"/> <!-- true: royale, false: realsense -->
  <arg name="filter_ouster_points" default="false"/> 

  <arg name="royale_enable_processing" default="true"/>  
  <arg name="royale_node_name"         default="royale_camera"/>

  <!-- <arg name="rs" default="832112071706"/> -->
  <!-- <arg name="rs_low" default="838212073252"/> -->
  <arg name="rs_filters" default="temporal,spatial,hole_filling"/>

  <include file="$(find carplanner_msgs)/launch/robot_state_publisher.launch">
    <arg name="urdf_path" value="$(find carplanner_msgs)/urdf/ninjacar.urdf.xacro"/>
  </include>

  <include file="$(find microstrain_mips)/launch/microstrain.launch" if="$(arg enable_imu)">
    <arg name="imu_rate" value="500"/>
  </include>

  <include file="$(find royale_in_ros)/launch/camera_driver.launch" if="$(eval enable_depth_camera and use_royale)">
    <arg name="enable_processing" value="$(arg royale_enable_processing)"/>  
    <arg name="node_name"         value="$(arg royale_node_name)"/>
  </include>

  <include file="$(find realsense2_camera)/launch/rs_camera.launch" if="$(eval enable_depth_camera and not use_royale)">
    <!-- <arg name="serial_no"         value="$(arg rs)"/> -->
    <!-- <arg name="camera"            value="camera_fwd"/> -->
    <arg name="align_depth"       value="true"/>
    <arg name="filters"           value="$(arg rs_filters)"/>
    <arg name="initial_reset"     value="true"/>
    <!-- <arg name="enable_pointcloud" value="true"/> -->
  </include>

  <!-- <include file="$(find realsense2_camera)/launch/rs_camera.launch">
    <arg name="serial_no"         value="$(arg rs_low)"/>
    <arg name="camera"            value="camera_low"/>
    <arg name="align_depth"       value="true"/>
    <arg name="filters"           value="temporal,spatial,hole_filling"/>
    <arg name="initial_reset"     value="true"/>
    <arg name="enable_pointcloud" value="true"/>
  </include> -->

  <include file="$(find ouster_ros)/ouster.launch" if="$(arg enable_lidar)">
    <arg name="sensor_hostname" value="192.168.20.21" doc="hostname or IP in dotted decimal form of the sensor"/>
    <arg name="udp_dest" value="192.168.20.20" doc="hostname or IP where the sensor will send data packets"/>
    <!-- <arg name="lidar_port" value="0" doc="port to which the sensor should send lidar data"/> -->
    <!-- <arg name="imu_port" value="0" doc="port to which the sensor should send imu data"/> -->
    <!-- <arg name="replay" value="false" doc="do not connect to a sensor; expect /os_node/{lidar,imu}_packets from replay"/> -->
    <arg name="lidar_mode" value="1024x20" doc="resolution and rate: either 512x10, 512x20, 1024x10, 1024x20, or 2048x10"/>
    <arg name="timestamp_mode" value="TIME_FROM_PTP_1588" doc="method used to timestamp measurements: TIME_FROM_INTERNAL_OSC, TIME_FROM_SYNC_PULSE_IN, TIME_FROM_PTP_1588"/>
    <arg name="metadata" value="$(find ouster_ros)/os_meta" doc="path to read or write metadata file when replaying or receiving sensor data, respectively"/>
    <!-- <arg name="viz" value="false" doc="whether to run a rviz"/> -->
    <!-- <arg name="rviz_config" value="-d $(find ouster_ros)/viz.rviz" doc="optional rviz config file"/> -->
    <!-- <arg name="tf_prefix" value="" doc="namespace for tf transforms"/> -->
    <!-- <arg name="udp_profile_lidar" value="" doc="lidar packet profile: LEGACY, RNG19_RFL8_SIG16_NIR16_DUAL, RNG19_RFL8_SIG16_NIR16, RNG15_RFL8_NIR8"/> -->
  </include>

  <node pkg="nodelet" type="nodelet" name="ouster_points_filter" if="$(arg filter_ouster_points)"
    args="standalone pcl/PassThrough">
    <remap from="~input" to="/os_cloud_node/points" />
    <remap from="~output" to="/points" />
    <rosparam>
        # true: no points in the box, false: no points outside the box
        <!-- negative: false -->
        filter_limit_negative: true

        <!-- mean_k: 2
        stddev: 1.0 -->
        
        <!-- input_frame: 
        output_frame: -->

        <!-- min_x: -1.0
        max_x: 0.2
        min_y: -0.5
        max_y: 0.5
        min_z: -0.75
        max_z: 0.2  -->

        filter_field_name: z
        filter_limit_min: -1.0
        filter_limit_max: 0.5
    </rosparam>
  </node>
  <node pkg="topic_tools" type="relay" name="ouster_points_relay" unless="$(arg filter_ouster_points)"
    args="/os_cloud_node/points /points">
  </node>


</launch>
